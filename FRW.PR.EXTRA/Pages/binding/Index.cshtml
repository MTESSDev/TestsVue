@page "{id}/{gabarit?}"
@model BindingIndexModel

@{
    Layout = "_NoLayout";
    ViewData["Title"] = "FRW.PDFBinder";
}

@{
    // here we do the serialization of our dictionary into JSON using Newtonsoft.Json package
    // this object will be used in our Vue application

    // over the years of web development, I've found out that the following
    // serialization solves the problems I've encountered so far

    // in a real app this would be created as a helper method somewhere
    // if we want to exclude the c# code from our view
    var serializationSettings = new Newtonsoft.Json.JsonSerializerSettings()
    {
        StringEscapeHandling = Newtonsoft.Json.StringEscapeHandling.EscapeHtml
    };

    var data =
        Html.Raw(
             System.Web.HttpUtility.JavaScriptStringEncode(
                  Newtonsoft.Json.JsonConvert.SerializeObject(
                    Model.VueData, Newtonsoft.Json.Formatting.None, serializationSettings
                ),
             false)
        );
}

@section style{
    <link rel="stylesheet" href="~/css/additionnel.min.css" asp-append-version="true" />
    <link rel="stylesheet" href="/css/pdf/pdf_viewer.css">

    <!-- template for the modal component -->
    <script type="text/x-template" id="modal-template">
        <transition name="modal">
            <div class="modal-mask">
                <div class="fenetre-message modal show" ref="modalFocusable" data-backdrop="static" tabindex="-1" role="dialog" aria-modal="true" aria-labelledby="modalTitle" style="display:block; overflow-y: auto" @@keydown.esc="$emit('close')">
                    <!--<div class="modal-wrapper">-->
                    <div class="modal-dialog modal-lg">

                        <!--<div class="modal-container">-->
                        <div class="modal-content">

                            <div class="modal-header d-flex align-items-center">
                                <h1 class="modal-title" id="modalTitle">
                                    <slot name="title">
                                        default title
                                    </slot>
                                </h1>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Fermer" @@click="$emit('close')">
                                    <span aria-hidden="true">×</span>
                                </button>
                            </div>

                            <div class="modal-body">
                                <slot name="body">
                                    default body
                                </slot>
                            </div>

                            <div class="modal-footer">
                                <slot name="footer">
                                    <button class="btn btn-secondaire" @@click="$emit('close')">
                                        Annuler
                                    </button>
                                    <button class="btn btn-primaire" @@click="save">
                                        Enregistrer
                                    </button>
                                </slot>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </transition>
    </script>

    <script type="text/x-template" id="select2-template">
        <select class="form-control form-group">
          <slot></slot>
        </select>
    </script>


    <script type="text/x-template" id="pdfjs-template">
        <input test></input>
    </script>

    <style>
        .modal-mask {
            position: fixed;
            z-index: 9998;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: table;
            transition: opacity 0.3s ease;
        }

        /* Espacement checkbox inline */
        .custom-checkbox.lg.d-inline-block .custom-control-label::before, .custom-radio.lg .custom-control-label::before {
            left: -1.75rem
        }
        .custom-checkbox.lg.d-inline-block .custom-control-label::after, .custom-radio.lg .custom-control-label::after {
            left: -1.75rem
        }

        /*
            * The following styles are auto-applied to elements with
            * transition="modal" when their visibility is toggled
            * by Vue.js.
            *
            * You can easily play with the modal transition by editing
            * these styles.
            */
        .modal-enter {
            opacity: 0;
        }

        .modal-leave-active {
            opacity: 0;
        }

            .modal-enter .fenetre-message,
            .modal-leave-active .fenetre-message {
                -webkit-transform: scale(1.1);
                transform: scale(1.1);
            }

        .required-field-icon {
            display: none;
        }

        .select2-container--open {
            z-index: 9999999
        }

        /* basic positioning */
        .legend {
            list-style: none;
        }

            .legend li {
                float: left;
                margin-right: 10px;
            }

            .legend span {
                border: 1px solid #ccc;
                float: left;
                width: 12px;
                height: 12px;
                margin: 2px;
            }
            /* your colors */
            .legend .green {
                background-color: green;
            }

            .legend .gold {
                background-color: gold;
            }

            .legend .red {
                background-color: red;
            }
    </style>
}


<!-- app -->
<div id="app">

    <!-- use the modal component, pass in the prop -->
    <modal v-if="selectedField !=''" @@close="selectedField = ''" ref="modalComponent">
        <!--
          you can use custom content here to overwrite
          default content
        -->
        <span slot="title">{{selectedField.title}}</span>
        <div slot="body">

            <label class="form-group">Champ du PDF <input type="text" class="form-control d-inline-block w-auto" readonly disabled :value="selectedField.pdfId" /></label>
            <div class="card section-secondaire">
                <div class="card-title">
                    <h2>Assignation source</h2>
                </div>
                <div class="card-body">
                    <label for="select2groups">
                        Filtre section
                    </label>
                    <select2groups id="select2groups" class="form-control form-group" :options="optionsGroups" v-model="selectedGroup">
                        <option value="0">Toutes</option>
                    </select2groups>

                    <label for="select2fields">
                        Champ(s) et valeur(s) ({{optionsFields.length}})
                    </label>
                    <div class="custom-control custom-checkbox lg d-inline-block ml-4">
                        <input id="afficherValeursAssignees" type="checkbox" v-model="showAll" class="custom-control-input" />
                        <label class="custom-control-label" for="afficherValeursAssignees">Afficher même les valeurs assignées</label>
                    </div>

                    <select2fields id="select2fields" class="form-control form-group" multiple :options="optionsFields" v-model="selectedFieldsTemp">
                        <option disabled value="0">Choisir</option>
                    </select2fields>


                    <label for="formule">Formule (optionnel)</label>
                    <span class="precision">Voir la doc de Smart.Format.</span>
                    <textarea id="formule" class="form-control" type="text" rows="2" v-model="selectedFormula"></textarea>
                </div>
            </div>
        </div>
    </modal>

    <div style="padding: 0px; border: 1px dotted darkgrey; width: 100%">


        <!--
            <button class="btn btn-primaire" onclick="chargerPdf('/binding/getpdf/3003?pdf=3003-01_ProjetDynDEV')">3003-01 - Adulte 1</button>
            <button class="btn btn-secondaire" onclick="chargerPdf('/binding/getpdf/3003?pdf=3003-01_ProjetDynDEV')">3003-01 - Adulte 2</button>
        -->
        <div id="gabarits">
            <ul>
                <li is="todo-item"
                    style="display: inline;"
                    v-for="(template, index) in templates"
                    v-bind:key="template.id"
                    v-bind:id="template.id"
                    v-bind:title="template.name"
                    v-on:remove="templates.splice(index, 1)"></li>
            </ul>
        </div>

        <div style="width: 100%; text-align: center;">
            <ul class="legend">
                <li><span class="green"></span> Champ assigné</li>
                <li><span class="gold"></span> Champ non-assigné</li>
                <li><span class="red"></span> Champ assigné à une source inexistante</li>
            </ul>
        </div>
        <center>
            <div style="padding: 4px; background: lavender; border: 1px solid black; display: inline-block;">
                <form id="form1" novalidate ref="container">
                    <div style="border: 1px dashed darkviolet;" id="pdfTarget"></div>
                </form>
            </div>
        </center>
    </div>
</div>


@section scripts{


    <script src="~/js/additionnel.min.js" asp-append-version="true"></script>
    <script src="/scripts/pdf/pdf_viewer.js"></script>
    <script src="https://unpkg.com/vue"></script>

    <script>

        definirParametresDefautSelect2();

        window.onload = function () {

            pdfjsLib.GlobalWorkerOptions.workerSrc = '/scripts/pdf/pdf.worker.js';

            chargerPdf('/binding/getpdf/3003?pdf=3003-01_ProjetDynDEV');
        }

        function definirParametresDefautSelect2() {
            if ($.fn.select2 != undefined) {
                $.fn.select2.defaults.set("theme", "bootstrap4");
                $.fn.select2.defaults.set("language", $('html').attr('lang') || 'fr');
            }
        };

        function chargerPdf(pdf) {

            var DEFAULT_SCALE = 1.0;

            var container = document.getElementById('pdfTarget');

            container.innerHTML = "";

            var values = {};

            /*var bindingSet = {
                "nom1_Req-00": '{nom}'
            };*/

            // Fetch the PDF document from the URL using promises.
            var loadingTask = pdfjsLib.getDocument(pdf);

            loadingTask.promise.then(function (doc) {

                for (var i = 1; i <= doc.numPages; i++) {

                    var promise = doc.getPage(i).then(function (pdfPage) {

                        pdfjsViewer.FormFunctionality.setPostRenderHook(function () {
                            app.MajChamps();
                        });

                        pdfjsViewer.FormFunctionality.setPostCreationTweak(function (fieldType, elementId, element) {

                            /*switch (fieldType)
                            {
                                case "TEXT":
                                    element.style.backgroundColor = "red";
                                    break;
                                case "TEXT":
                                    element.style.backgroundColor = "red";
                                    break;
                            }*/
                            //element.style.backgroundColor = "red";
                            //element.setAttribute('style', "background-color: red");
                            element.readOnly = true;
                            element.setAttribute('data-isPdf', true);
                            element.onclick = function (e) {
                                app.sendInfo(e.target, fieldType);
                                e.preventDefault();
                            };

                            /*var ComponentClass = Vue.extend(customInput)
                            var instance = new ComponentClass({
                                parent: app,
                                propsData: { value: 'text', style: "test"}
                            })
                            //instance.$slots.default = ['Click me!']
                            instance.$mount() // pass nothing
                            //         console.log(this.$refs)
                            app.$refs.container.appendChild(instance.$el)*/
                            //debugger;

                            //element.title = elementId.alternativeText;
                        });
                        return pdfjsViewer.FormFunctionality.render(1094, null, pdfPage, container, values,
                            {
                                interactiveForms: true,
                                hideForms: false
                            });
                    });

                }
            });
        }

    </script>

    <script>

        // register modal component
        var test = Vue.component("modal", {
            template: "#modal-template",
            methods: {
                save: function () {
                    var data = null;

                    if (this.$parent.selectedFieldsTemp.length !== 0) {
                        if (this.$parent.selectedFormula === "") {
                            this.$parent.selectedFormula = undefined;
                        }

                        var data = { Champs: this.$parent.selectedFieldsTemp, Formule: this.$parent.selectedFormula };
                        this.$parent.$set(this.$parent.bindActuel, this.$parent.selectedField.pdfId, data)

                    } else {
                        this.$parent.$delete(this.$parent.bindActuel, this.$parent.selectedField.pdfId)
                    }

                    if (this.$parent.selectedFields != this.$parent.selectedFieldsTemp) {
                        this.$parent.selectedFields = this.$parent.selectedFieldsTemp;
                        this.$parent.MajChamps();
                    }

                    //this.$parent.bind['test'] = this.$parent.selectedFields;
                    axios
                        .post('/binding/save/3003/' + this.$parent.gabaritEnCours, this.$parent.bindActuel)
                        .catch(function (error) {
                            // handle error
                            console.log(error);
                        })

                    this.$emit('close')
                }
            }
        });

        Vue.component('todo-item', {
            parent: app,
            template: '\
                <li>\
                  <button :class="getClass" v-on:click="redirectTo(id)">{{ title }}</button>\
                </li>\
              ',
            computed: {
                getClass: function () {
                    if (this.id === this.$parent.$data.gabaritEnCours) {
                        return "btn btn-primaire"
                    } else {
                        return "btn btn-secondaire"
                    }
                }
            },
            methods: {
                redirectTo: function (id) {
                    window.location.href = "/binding/3003/" + id;
                },
            },
            props: ['title', 'id']
        });

        /*var customInput =  Vue.component('custom-input', {
              props: ['value','style'],
              template: `
                  <input
                    v-bind:value="value"
                    :class="style"
                    v-on:input="$emit('input', $event.target.value)"
                  >
                `
          })*/

        Vue.component("select2groups", {
            props: ["options", "value"],
            template: "#select2-template",
            mounted: function () {
                var vm = this;
                $(this.$el)
                    // init select2
                    .select2({ data: this.options, selectOnClose: true, width: 'auto' })
                    .val(this.value)
                    .trigger("change")
                    // emit event on change.
                    .on("change", function () {
                        vm.$emit("input", this.value);
                    });
            },
            watch: {
                value: function (value) {
                    // update value
                    $(this.$el)
                        .val(value)
                        .trigger("change");
                },
                options: function (options) {
                    // update options
                    $(this.$el)
                        .empty()
                        .select2({ data: options, selectOnClose: true });
                }
            },
            destroyed: function () {
                $(this.$el)
                    .off()
                    .select2("destroy");
            }
        });

        Vue.component("select2fields", {
            props: ["options", "value"],
            template: "#select2-template",
            mounted: function () {
                var vm = this;
                $(this.$el)
                    // init select2
                    .select2({ data: this.options, selectOnClose: true, maximumSelectionLength: -1, width: 'auto'})
                    .val(this.value)
                    .trigger("change")
                    // emit event on change.
                    .on("change", function () {
                        vm.$emit("input", $(this).val());
                    }).on('select2:unselecting', function () {
                        $(this).data('unselecting', true);
                    }).on('select2:opening', function (e) {
                        if ($(this).data('unselecting')) {
                            $(this).removeData('unselecting');
                            e.preventDefault();
                        }
                    });
            },
            watch: {
                value: function (value) {
                    // update value
                    $(this.$el).val(value);
                    //.trigger("change");
                },
                options: function (options) {
                    // update options
                    var bckVal = this.value;
                    //debugger;
                    $(this.$el)
                        .empty()
                        .select2({ data: options, selectOnClose: true, maximumSelectionLength: -1 })
                        .val(bckVal)
                        .trigger("change");

                 }
            },
            destroyed: function () {
                $(this.$el)
                    .off()
                    .select2("destroy");
            }
        });

        // start app
        var app = new Vue({
            el: "#app",
            /*data: {
                formKey: { test: 0 },
                selectedField: '',
                selectedGroup: 0,
                selectedFields: [],
                optionsGroups: [{ id: 1, text: "Hello" }, { id: 2, text: "World" }],
            },*/
            data: function () {
                let donnees = JSON.parse('@data')
                donnees.selectedField = '';
                donnees.selectedFields = '';
                donnees.selectedFieldsTemp = '';
                donnees.selectedGroup = '';
                donnees.selectedFormula = '';
                donnees.showAll = false;
                return donnees;
            },

            computed: {
                all: function () {
                    var sall = [];
                    for (var i = 0; i < this.optionsGroups.length; i++) {
                        var group = this.allOptionsFields[this.optionsGroups[i]];
                        for (var j = 0; j < group.length; j++) {
                            sall.push(group[j]);
                        }
                    }
                    return sall;
                },
                onlyBinded: function () {
                    var sall = [];

                    //On boucle tous les gabarits
                    Object.entries(app.bind).forEach(gabarit => {
                        const [id, content] = gabarit;

                        //Ensuite toutes les valeurs deja assignées une fois
                        Object.entries(content).forEach(entry => {
                            const [key, value] = entry;

                            for (var i = 0; i < value.Champs.length; i++) {
                                if (!value.Champs[i].startsWith("<")) {

                                    cleanVal = value.Champs[i].split("==");
                                    if (cleanVal.length == 2 && !sall.includes(cleanVal[0])) {
                                        sall.push(cleanVal[0]);
                                    }
                                    sall.push(value.Champs[i]);
                                }
                            }
                        });
                    });


                    return sall;
                },
                bindActuel: function () {
                    return this.bind[this.gabaritEnCours];
                },
                optionsFields: function () {
                    var toReturn = [];

                    if (this.selectedGroup == "0") {
                        toReturn = this.all;
                    } else {
                        toReturn = this.allOptionsFields[this.selectedGroup];
                    }
                    if (!this.showAll) {
                        toReturn = toReturn.filter(function (el) {
                            return app.selectedFields.includes(el) || !app.onlyBinded.includes(el);
                        });

                    }

                    return toReturn;
                    //return [{
                    //            "id": 1,
                    //            "text": "Option 1.1"
                    //        },
                    //        {
                    //            "id": 2,
                    //            "text": "Option 1." + Date.now()
                    //        }
                    //    ];
                }
            },
            watch: {
                /*bindActuel: function (val, oldVal) {
                    this.MajChamps();
                }*/
            },
            methods: {
              MajChamps() {
                    var listeInput = $("input[data-isPdf='true']");

                    var sall = this.all;

                    for (var i = 0; i < listeInput.length; i++) {
                        if (typeof this.bind !== 'undefined'
                            && typeof this.bindActuel !== 'undefined'
                            && typeof this.bindActuel[listeInput[i].name] !== 'undefined') {

                            var nbFound = 0;

                            for (var j = 0; j < this.bindActuel[listeInput[i].name].Champs.length; j++) {

                                for (var k = 0; k < sall.length; k++) {
                                    if (sall[k] == this.bindActuel[listeInput[i].name].Champs[j]) {
                                        nbFound++;
                                    }
                                }

                            }

                            if (nbFound !== 0 && nbFound == this.bindActuel[listeInput[i].name].Champs.length) {
                                listeInput[i].style.backgroundColor = 'green';
                            } else {
                                listeInput[i].style.backgroundColor = 'red';
                            }

                        } else {
                            listeInput[i].style.backgroundColor = 'gold';
                        }
                    }
                },
                sendInfo(pdfElement, fieldType) {
                    //debugger;
                    //$('#'+pdfId)[0].style.backgroundColor = "blue";
                    this.selectedField = { "title": pdfElement.title, "pdfId": pdfElement.name };
                    if (this.selectedGroup == '') {
                        this.selectedGroup = '0';
                    }
                    this.selectedFieldsTemp = (typeof this.bindActuel[pdfElement.name] !== 'undefined') ? this.bindActuel[pdfElement.name].Champs : [];
                    this.selectedFormula = (typeof this.bindActuel[pdfElement.name] !== 'undefined') ? this.bindActuel[pdfElement.name].Formule : undefined;

                    this.selectedFields = this.selectedFieldsTemp;
                    this.$nextTick(function () {
                        this.$refs.modalComponent.$refs.modalFocusable.focus()
                    });
                }
            }
        });
    </script>
}

