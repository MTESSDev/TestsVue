{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$ref": "#/definitions/EcsForm",
    "definitions": {
        "EcsForm": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "form": {
                    "$ref": "#/definitions/Form"
                }
            },
            "required": [
                "form"
            ],
            "title": "EcsForm"
        },
        "Form": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "sections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Section"
                    }
                },
                "templates": {
                    "type": "object"
                },
                "inputDefaultClasses": {
                    "type": "object"
                }
            },
            "required": [],
            "title": "Form"
        },
        "Section": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "section": {
                    "type": "object",
                    "$ref": "#/definitions/Translation"
                },
                "id": {
                    "type": "string"
                },
                "classes": {
                    "type": "string",
                    "description": ""
                },
                "components": {
                    "type": "array",
                    "items": {
                        "anyOf": [{
                            "$ref": "#/definitions/Input"
                        },
                        {
                            "$ref": "#/definitions/Display"
                        }]
                    }
                }
            },
            "required": [
                "section"
            ],
            "title": "Section"
        },
        "Display": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "type": {
                    "type":"string",
                    "enum": ["inline", "dynamic"]
                },
                "classes": {
                    "type": "string",
                    "description": ""
                },
                "tag": {
                    "type": "string"
                },
                "text": {
                    "type": "object",
                    "$ref": "#/definitions/Translation"
                },
                "v-if": {
                    "type": "string",
                    "description": "Conditionnal display on another property/form field."
                },
                "components": {
                    "type": "array",
                    "items": {
                        "anyOf": [{
                            "$ref": "#/definitions/Input"
                        },
                        {
                            "$ref": "#/definitions/Display"
                        }]
                    }
                }
            },
            "title": "Display",
            "description": "Display component"
        },
        "Input": {
            "type": "object",
            "default": {"type": "radio", "validations": {"required": "trim"}},
            "additionalProperties": false,
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Adds a name attribute, and when used with <FormulateForm> this is the key of the field. If no name is defined a random hash will be assigned"
                },
                "type": {
                    "type": "string",
                    "default": "text",
                    "description": "Required. The type of input element. See the input library for a full range of options.",
                    "enum": ["text", "button", "submit", "file", "image", "group", "radio", "checkbox", "select", "number", "slider", "textarea", "color", "date", "datetime-local", "email", "hidden", "month", "password", "search", "tel", "time", "url", "week"]
                },
                "limit":{
                    "type": ["number"]
                },
                "validation-name": {
                    "type": "object",
                    "description": "The name to use in validation error messages. By default, this uses the name prop if available and falls back to the label prop. It can be explicitly overridden here if needed.",
                    "$ref": "#/definitions/Translation"
                },
                "label": {
                    "type": "object",
                    "description": "A descriptive label for the input element.",
                    "$ref": "#/definitions/Translation"
                },
                "placeholder": {
                    "type": "object",
                    "description": "Placeholder value",
                    "$ref": "#/definitions/Translation"
                },
                "classes": {
                    "type": "string",
                    "description": ""
                },
                "help": {
                    "type": "object",
                    "description": "Help text to be displayed with the input.",
                    "$ref": "#/definitions/Translation"
                },
                "pdfBind": {
                    "type": "string"
                },
                "additionals": {
                    "type": "object"
                },
                "v-if": {
                    "type": "string",
                    "description": "Conditionnal display on another property/form field."
                },
                "helpPosition": {
                  "type": "string",
                  "enum": ["before", "after"]
                },
                "min": {
                    "type": "string",
                    "example": ["2018-02"]
                },
                "max": {
                    "type": "string",
                    "example": ["2018-02"]
                },
                "addLabel": {
                    "type": "object",
                    "$ref": "#/definitions/Translation"
                },
                "instanceLabel": {
                    "type": "object",
                    "description": "Label of one instance of a group.",
                    "$ref": "#/definitions/Translation"
                },
                "tooltip": {
                    "type": "object",
                    "$ref": "#/definitions/Translation"
                },
                "options": {
                    "type": ["object", "null", "string", "array"],
                    "description": "Array or object of options (select or box classifications)",
                    "examples": ["yesno"]
                },
                "validations": {
                    "type": "object",
                    "additionalProperties": false,
                    "default": {},
                    "properties": {
                        "required": {
                            "type": ["string", "null"],
                            "default": "trim",
                            "description": "Checks if the input is empty."
                          },
                        "accepted": {
                            "type": "null",
                            "description": "The value must be yes, on, 1 or true. Useful for box inputs, often where you need to validate if someone has accepted terms."
                        },
                        "before": {
                            "type": "string",
                            "description": "Checks if a date comes before another date. If no date argument is provided the current time will be used. The value must be a Date object or a string that can be evaluated by Date.parse.",
                            "examples": ["2020-12-31"]
                        },
                        "after": {
                            "type": "string",
                            "description": "Checks if a date comes after another date. If no date argument is provided the current time will be used. The value must be a Date object or a string that can be evaluated by Date.parse.",
                            "examples": ["2020-12-31"]
                        },
                        "alpha": {
                            "type": "string",
                            "description": "Checks if a value is only alphabetical characters. There are two character sets latin and default. Latin characters are strictly [a-zA-Z] while the default set includes most accented characters as well like: ä, ù, or ś.",
                            "examples": ["latin"],
                            "enum": ["latin", "default"]
                        },
                        "alphanumeric": {
                            "type": ["string", "null"],
                            "description": "Checks if a value is only made of alphabetical characters or numeric digits. For the alphabetical portion you can pass default or latin - see alpha.",
                            "enum": ["latin", "default", "null"]
                        },
                        "between": {
                            "type": ["string"],
                            "description": "Checks if a number or string length is between a minimum or maximum. Both the maximum and minimum are exclusive. If the value being validated is a string the string’s length is used for comparison. If a number is used, the numeric value is used for comparison. In v2.2.4+ you can force it to always check the numeric value or string length by setting an optional third argument to value or length.",
                            "examples": ["10,18,value", "8,20,length"]
                        },
                        "confirm": {
                            "type": ["string", "null"],
                            "description": "Checks if the field value matches the value of another field. Mostly used for hidden fields - like password confirmations. By default, a confirm rule will look for other fields in the same FormulateForm with the suffix _confirm. If you’d like the rule to use a different field as the confirmation, simply pass the other field name as an argument confirm:other_field.",
                            "examples": ["confirm:other_field"]
                        },
                        "bail": {
                            "type": ["null"],
                            "description": "Used to logically stop validation on the first subsequent validation error."
                        },
                        "email": {
                            "type": ["null"],
                            "description": "Checks if the input is a valid email address format."
                        },
                        "starts_with": {
                            "type": ["string"],
                            "description": "Checks if the input starts with one of the provided options."
                        },
                        "ends_with": {
                            "type": ["string"],
                            "description": "Checks if the input ends with one of the provided options."
                        },
                        "in": {
                            "type": ["string"],
                            "description": "Checks if the input is included in an array of options."
                        },
                        "matches": {
                            "type": ["string"],
                            "examples": ["val1,val2", "/[0-9]/"],
                            "description": "Checks if the input matches a particular value or pattern. If you pass multiple arguments, it checks each until a match is found."
                        },
                        "min": {
                            "type": ["string"],
                            "examples": ["9,length", "3", "10,value"],
                            "description": "Checks the value of a Number, or length of a String or Array is more than a maximum length or value. The minimum value/length defaults to 1. You can force the validator to evaluate length or value by passing a second argument of either length or value."
                        },
                        "max": {
                            "type": ["string", "number"],
                            "examples": ["5,length", 3, "10,value"],
                            "description": "Checks that the value of a Number, or length of a String or Array is less than a maximum length or value. The maximum value/length defaults to 10."
                        },
                        "mime": {
                            "type": ["string"],
                            "examples": ["image/png", "image/jpeg"],
                            "description": "Checks if the type of file selected is an allowed value. This validator uses the file’s extension to determine the mime type. Back-end validation of the file’s content is still strongly encouraged as front-end validation can be bypassed by savvy users."
                        },
                        "not": {
                            "type": ["string"],
                            "examples": ["val1,val2"],
                            "description": "Checks to ensure the input data does not match a set of predefined values."
                        },
                        "number": {
                            "type": ["null"],
                            "description": "Checks if the input is a valid number as evaluated by isNaN()."
                        },
                        "optional": {
                            "type": ["null"],
                            "description": "Use this rule to make a field optional. When used all validation rules pass until the field is no longer empty. Its location in the list of validation rules has no effect."
                        },
                        "url": {
                            "type": ["null"],
                            "description": "Checks if the input value appears to be a properly formatted URL including the protocol. This does not check if the URL actually resolves."
                        }
                    },
                    "title": "Validation"
                },
                "repeatable": {
                    "type": "boolean"
                },
                "minimum": {
                    "type": "number"
                },
                "components": {
                    "type": "array",
                    "items": {
                        "anyOf": [{
                            "$ref": "#/definitions/Input"
                        },
                        {
                            "$ref": "#/definitions/Display"
                        }]
                    }
                }
            },
            "examples": ["validations"],
            "required": [
                "label",
                "type",
                "name"
            ],
            "dependencies": {
                "minimum": {
                    "properties": {
                        "type": { "const": "group" }
                    }
                },
                "limit": {
                    "properties": {
                        "type": { "const": "group" }
                    }
                },
                "addLabel": {
                    "properties": {
                        "type": { "enum": ["group", "file"] }
                    }
                }
            },
            "title": "Input"
        },
        "Translation": {
            "type": "object",
            "additionalProperties": true,
            "default": {"fr":"", "en": ""},
            "properties": {
                "fr": {
                    "type": ["string", "null"]
                },
                "en": {
                    "type": ["string", "null"]
                }
            },
            "required": [
                "fr"
            ],
            "title": "Translation"
        }
    }
}
