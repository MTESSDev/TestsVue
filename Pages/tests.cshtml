@page
@model TestsModel
@{
    ViewData["Title"] = "Demande d'aide financière de dernier recours";
    ViewData["masquerPremierEspaceurConteneurColonnes"] = true;
}

@section style{

    <style>
        .formulate-input-errors {
            margin: 0;
            padding: 0;
        }
    </style>
}

@section colonneGauche{
    <nav>
        <ul>
            <li v-for="page in pages" :key="page.no">
                {{ page.titre }}
            </li>
        </ul>
    </nav>
}

@section colonneDroite{
    <div id="form">
        @*<template>
                <formulate-form v-model="values"
                                :schema="schema"></formulate-form>
            </template>*@


        <template>
            @Html.Raw(Model.Formulaire)
        </template>
    </div>
}

@section scripts{
    <script src="https://unpkg.com/vue/dist/vue.min.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script src="form/formulate.min.js"></script>
    <script src="form/locales.min.js"></script>
    <script src="form/mtess-vueformulate.min.js"></script>

    <script>

    Vue.component('Label', MtessVueformulate.Label)
    Vue.component('ErrorList', MtessVueformulate.ErrorList)
    Vue.component('RepeatableRemove', MtessVueformulate.RepeatableRemove)

/*        classes: {
            outer: 'form-group',
                input: 'form-control',
                    inputHasErrors: 'is-invalid',
                        help: 'form-text text-muted',
                            errors: 'list-unstyled text-danger'
        },*/

    Vue.use(VueFormulate, {
        plugins: [this.VueFormulateI18n.fr],
        classes: {
            error: 'text-danger field-validation-error',
            input: (context, baseClasses) => {
                return obtenirClassesInput(context, baseClasses)
            }
        },
        slotComponents: {
            label: 'Label',
            errorList: 'ErrorList',
            remove: 'RepeatableRemove'
        },
        locale: 'fr',
        validationNameStrategy: ['validationName', 'label', 'name', 'type']
    });

    const App = {
        el: '#main',
        methods: {
            failedValidation(data) {
                this.$el.setAttribute('data-submit', true)
                console.log('failedValidation')
                // console.log(data)
            },
            submitRawHandler(data) {
                // TODO ici trouver le moyen d'exécuter la méthode terminerTraitementEnCoursSoumissionForm lorsque notre code ECS qui disable le bouton est terminé... Sinon le bouton reste disabled.
                // Le setTimeout est utilisé afin de s'assurer que le traitement de soumission de formulaire qui ajoute spinner et disable et bien terminé.
                setTimeout(function () {
                    terminerTraitementEnCoursSoumissionForm()
                },800)
            },
            submitHandler(data) {
                axios.post('/Privacy', data)
            },
            invalidMessage(fields) {
                console.log('invalidMessage')
                const listeErreurs = []
                const nomChamps = Object.keys(fields)

                nomChamps.forEach(nomChamp => {
                    const champ = fields[nomChamp]
                    if (champ.hasVisibleErrors) {
                        if (champ.context && champ.context.type !== 'group') {
                            this.ajouterErreursChamp(champ, listeErreurs)
                        } else {
                            this.ajouterErreursGroupe(champ, listeErreurs, true)
                        }
                    }
                })
                return JSON.stringify(listeErreurs)
            },
            ajouterErreursChamp(champ, listeErreurs) {
                champ.context.visibleValidationErrors.forEach(message => {
                    listeErreurs.push({ id: champ.context.id, message: message })
                })
            },
            ajouterErreursGroupe(groupe, listeErreurs, ajouterErreursEnfants) {
                let erreursGroupe = []
                let erreursGroupeEnfants = []

                // Erreurs dans les enfants du groupe
                groupe.$children.forEach(enfant => {
                    this.ajouterErreursEnfant(enfant, erreursGroupeEnfants)
                })

                // Obtenir l'id du premier contrôle en erreur dans le groupe. S'il n'y en a pas, on utilise l'id du groupe (div) on rend le div focusable
                let idPremierControleErreurGroupe = erreursGroupeEnfants.length ? erreursGroupeEnfants[0].id : null
                if (!idPremierControleErreurGroupe) {
                    idPremierControleErreurGroupe = groupe._data.defaultId
                    groupe.$el.setAttribute('id', idPremierControleErreurGroupe)
                    groupe.$el.setAttribute('tabindex', '-1')
                }

                if (groupe.allErrors.length) {
                    // Erreurs haut niveau du groupe
                    groupe.allErrors.forEach(message => {
                        if (message !== true) {
                            erreursGroupe.push({ id: idPremierControleErreurGroupe, message: message })
                        }
                    })
                }

                if (erreursGroupe.length <= 0) {
                    // Aucun message erreur de haut niveau sur le groupe, on indique qu'il y a au moins une erreur et on pointe sur première champ erreur du groupe
                    erreursGroupe.push({ id: idPremierControleErreurGroupe, message: groupe.label + ' contient au moins une erreur.' })
                }

                listeErreurs.push(...erreursGroupe)

                if (ajouterErreursEnfants) {
                    listeErreurs.push(...erreursGroupeEnfants)
                }
            },
            ajouterErreursEnfant(enfant, listeErreurs) {
                if (enfant.isSubField && enfant.isSubField()) {
                    const idEnfant = enfant.context.attributes.id

                    enfant.visibleValidationErrors.forEach(message => {
                        listeErreurs.push({ id: idEnfant, message: message })
                    })
                } else {
                    enfant.$children.forEach(enfant => {
                        this.ajouterErreursEnfant(enfant, listeErreurs)
                    })
                }
            },
            ajouterErreursGroupe2(groupe, listeErreurs) {
                const conteneursChamps = groupe.$el.querySelectorAll('.formulate-input')
                console.log('A -> ' + conteneursChamps.length)
                conteneursChamps.forEach(conteneurChamp => {
//                    if (conteneurChamp.hasAttribute('data-has-errors')) {
                        console.log('B')
                        const label = conteneurChamp.querySelector('label')
                        const messages = conteneurChamp.querySelectorAll('.formulate-input-error')

                        if (label && messages.length > 0) {
                            console.log('C')
                            const id = label.getAttribute('for')

                            messages.forEach(message => {
                                console.log('D')
                                listeErreurs.push({ id: id, message: message.innerText })
                            })
                        }
                    //}
                })
                console.log("Erreurs -> " + listeErreurs)
            }
        },
        data: {
            form: {noPageCourante: 1},
            formErrors: [],
            inputErrors: {},
            pages: obtenirPages()
        },
       @*/* data: {
            values: {},
            schema: @Html.Raw(Model.Formulaire)
        },
        */*@
        mounted() {
            console.log('Application mounted.')
        }
    }

    window.addEventListener('load', () => {
        new Vue(App)
    })

        /*TODO ici obtenir les pages à partir de la config. */
        function obtenirPages() {
            return [{ no: 1, titre: "Raison de la demande" },
                { no: 2, titre: "Renseignements généraux" },
                { no: 3, titre: "Études" }
            ]
        }
        function obtenirClassesInput(context, baseClasses) {
            switch (context.classification) {
                case "text":
                case "textArea":
                case "select":
                    baseClasses.push('form-control')
                    break
                case "button":
                    if (context.type === 'submit') {
                        baseClasses.push('btn btn-primaire')
                    }
                    break
            }

            return baseClasses
        }

        function obtenirClassesOuter(context, baseClasses) {
            switch (context.classification) {
                case "text":
                case "group":
                case "textArea":
                case "select":
                    baseClasses.push('form-group')
                    break
            }

            return baseClasses
        }

        function obtenirTexteEdite(id) {
            return '(Patch) Non défini.'
        }

    </script>
}