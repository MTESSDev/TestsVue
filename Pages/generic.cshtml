@page "{id?}"
@model GenericModel
@{
    ViewData["Title"] = "Formulaire";
}
<base href="~/" />
<link rel="stylesheet" href="./form/snow.min.css">
<style>
    @@media (min-width: 650px) {
        .order {
            display: flex;
        }
    }

    @@media (min-width: 720px) {
        .order {
            display: block;
        }
    }

    @@media (min-width: 850px) {
        .order {
            display: flex;
        }

            .order .formulate-input {
                margin-right: 1.5em;
            }
    }

    .order .formulate-input {
        margin-right: 2em;
        margin-bottom: 0;
    }

    .flex-wrapper {
        max-width: 20em;
        display: flex
    }

        .flex-wrapper > .formulate-input:nth-child(odd) {
            margin-right: 1em;
        }

        .flex-wrapper > .formulate-input.flex-item-small {
            width: 5em;
            flex-basis: 5em;
            flex-shrink: 0;
        }

        .flex-wrapper > .formulate-input {
            flex-grow: 1;
        }


    .formulate-input[data-classification=text] .formulate-input-element--date input {
        padding: .60em;
    }
</style>

<div id="form">
    <template>
        @Html.Raw(Model.FormRaw)
    </template>
</div>

<script src="https://unpkg.com/vue"></script>
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
<script src="https://unpkg.com/@@braid/vue-formulate"></script>
<script src="./form/locales.min.js"></script>

<script>
    Vue.use(VueFormulate, {
        plugins: [this.VueFormulateI18n.fr],
        locale: 'fr',
        validationNameStrategy: ['validationName', 'label', 'name', 'type']
    });

    const App = {
        el: '#form',

        methods: {
            failedValidation(data) {
                debugger;
            },
            submitHandler(data) {
                axios.post('/Privacy', data);
            },
            invalidMessage(fields) {
                debugger;
                const fieldNames = Object.keys(fields)
                const listOfNames = fieldNames.map(fieldName => fieldName.replace('_', ' '))
                return `Invalid fields: ${listOfNames}`
            },
            //validate() {
            //    debugger;
            //    this.isValidate = !this.$refs.form.$children.some(
            //       (input) => typeof input.isValid !== 'undefined' && !input.isValid
            //    )
            //}
        },

        data: {
            contenuform: {},
            formErrors: [],
            inputErrors: {}
        },
       @*/* data: {
            values: {},
            schema: @Html.Raw(Model.Formulaire)
        },
        */*@
        mounted() {
            console.log('Application mounted.')
        }
    }

    window.addEventListener('load', () => {
        new Vue(App)
    })

</script>
